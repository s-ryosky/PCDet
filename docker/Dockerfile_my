# From https://github.com/ufoym/deepo/blob/master/docker/Dockerfile.pytorch-py36-cu90

# ==================================================================
# module list
# ------------------------------------------------------------------
# python        3.6    (apt)
# pytorch       1.2.0  (pip)
# ==================================================================

FROM nvidia/cuda:10.0-cudnn7-devel-ubuntu16.04
ENV CONDA_DIR /opt/conda
ENV PATH ${CONDA_DIR}/bin:$PATH
RUN mkdir -p ${CONDA_DIR} && \
    echo export PATH=${CONDA_DIR}/bin:'$PATH' > /etc/profile.d/conda.sh
RUN APT_INSTALL="apt-get install -y --no-install-recommends" && \
    rm -rf /var/lib/apt/lists/* \
           /etc/apt/sources.list.d/cuda.list \
           /etc/apt/sources.list.d/nvidia-ml.list && \
    apt-get update && \
# ==================================================================
# tools
# ------------------------------------------------------------------
    DEBIAN_FRONTEND=noninteractive $APT_INSTALL \
        build-essential \
        ca-certificates \
        wget \
        git \
        vim \
        fish \
        libsparsehash-dev \
        zip \
        unzip \
        tar \
        sudo \
        curl \
        rsync \
        gnuplot-x11 \
        ghostscript \
        texlive-extra-utils \
        apt-utils \
        gcc \
        g++ \
        graphviz \
        libprotobuf-dev \
        protobuf-compiler \
        software-properties-common \
        python-software-properties \
        python3-dev \
        python3-pip \
        python3-tk \
        python3-dbg \
        python3-wheel \
        python3-setuptools \
        libhdf5-dev \
        libopenblas-dev \
        liblapack-dev \
        libblas-dev \
        gfortran \
        locales
# ==================================================================
# python
# ------------------------------------------------------------------
RUN wget --quiet https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh && \
    /bin/bash /Miniconda3-latest-Linux-x86_64.sh -f -b -p $CONDA_DIR && \
    rm Miniconda3-latest-Linux-x86_64.sh
ARG python_version=3.6.7
RUN conda install -y python=${python_version}
RUN pip install -U pip
RUN conda install \
        cudatoolkit \
        h5py \
        matplotlib \
        mkl \
        nose \
        notebook \
        pandas \
        pillow==6.2.1 \
        pyyaml \
        scikit-image \
        scikit-learn \
        scipy \
        six
RUN pip install \
        addict \
        cachetools==3.1.0 \
        cython \
        descartes \
        easydict \
        fire \
        flask \
        flask_cors \
        future \
        imagecorruptions \
        joblib \
        jupyter==1.0.0 \
        numpy \
        numba==0.47 \
        objgraph \
        open3d-python \
        opencv-python \
        opencv-contrib-python \
        protobuf \
        psutil \
        pybind11 \
        pyquaternion==0.9.5 \
        pytest-runner \
        seaborn \
        shapely \
        terminaltables \
        tqdm==4.25.0 \
        vtk
RUN pip install \
        lyft-dataset-sdk \
        nuscenes_devkit \
        pycocotools==2.0.0
# ==================================================================
# pytorch & tensorflow
# ------------------------------------------------------------------
RUN pip install \
        tensorflow==1.14.0 \
        tensorboardX
RUN conda install \
        pytorch==1.1.0 torchvision==0.3.0 cudatoolkit=10.0 -c pytorch
# ==================================================================
# config & cleanup
# ------------------------------------------------------------------
RUN ldconfig && \
    apt-get clean && \
    apt-get autoremove && \
    rm -rf /var/lib/apt/lists/* /tmp/* ~/*
# ==================================================================
# spconv
# ------------------------------------------------------------------
WORKDIR /opt
RUN wget https://dl.bintray.com/boostorg/release/1.68.0/source/boost_1_68_0.tar.gz
RUN tar xzvf boost_1_68_0.tar.gz
RUN cp -r ./boost_1_68_0/boost /usr/include
RUN rm -rf ./boost_1_68_0
RUN rm -rf ./boost_1_68_0.tar.gz
RUN wget https://github.com/Kitware/CMake/releases/download/v3.14.4/cmake-3.14.4.tar.gz
RUN tar zxvf cmake-3.14.4.tar.gz
RUN cd ./cmake-3.14.4 && ./configure && make && make install && cd ..
RUN rm -rf ./cmake-3.14.4 && rm -rf ./cmake-3.14.4.tar.gz
RUN git clone --depth 99 --recursive https://github.com/traveller59/spconv.git
RUN cd ./spconv && \
    git checkout 5df97387208fd9f1b1aa01fb60228f9f99a8a766 && \
    python setup.py bdist_wheel && \
    pip install /opt/spconv/dist/spconv-1.0-cp36-cp36m-linux_x86_64.whl && \
    cd ..
# ==================================================================
# apex for training with FP16 mixed precision
# ------------------------------------------------------------------
RUN git clone --depth 99 https://github.com/NVIDIA/apex
RUN cd ./apex && \
    git checkout b5a7c5f972bc644804408dd96d7cb515df3af07b && \
    pip install -v --no-cache-dir --global-option="--cpp_ext" --global-option="--cuda_ext" . && cd ..
# ==================================================================
# PCDet
# ------------------------------------------------------------------
RUN git clone https://github.com/sshaoshuai/PCDet
RUN cd ./PCDet && \
    python setup.py build && \
    cd ..
# ==================================================================
# numba
# ------------------------------------------------------------------
ENV NUMBA_CUDA_DRIVER=/usr/lib/x86_64-linux-gnu/libcuda.so
# ==================================================================
# others
# ------------------------------------------------------------------
# Set the locale
RUN locale-gen ja_JP.UTF-8
ENV LANG ja_JP.UTF-8
ENV LANGUAGE ja:en
ENV LC_ALL ja_JP.UTF-8

# nvidia runtime
COPY --from=nvidia/opengl:1.1-glvnd-runtime-ubuntu16.04 \
    /usr/local/lib/x86_64-linux-gnu \
    /usr/local/lib/x86_64-linux-gnu

COPY --from=nvidia/opengl:1.1-glvnd-runtime-ubuntu16.04 \
    /usr/local/share/glvnd/egl_vendor.d/10_nvidia.json \
    /usr/local/share/glvnd/egl_vendor.d/10_nvidia.json

RUN echo '/usr/local/lib/x86_64-linux-gnu' >> /etc/ld.so.conf.d/glvnd.conf && \
    ldconfig && \
    echo '/usr/local/$LIB/libGL.so.1' >> /etc/ld.so.preload && \
    echo '/usr/local/$LIB/libEGL.so.1' >> /etc/ld.so.preload

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES ${NVIDIA_VISIBLE_DEVICES:-all}
ENV NVIDIA_DRIVER_CAPABILITIES ${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}graphics

# TensorBoard
EXPOSE 6006
# IPython
EXPOSE 8888

# User env
ARG USERNAME=docker
ARG UID=1000
ARG GID=1000
RUN useradd -m $USERNAME && \
    echo "$USERNAME:$USERNAME" | chpasswd && \
    usermod --shell /bin/bash $USERNAME && \
    usermod -aG sudo $USERNAME && \
    echo "$USERNAME ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers.d/$USERNAME && \
    chmod 0440 /etc/sudoers.d/$USERNAME && \
    usermod --uid $UID $USERNAME && \
    groupmod --gid $GID $USERNAME
